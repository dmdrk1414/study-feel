#include<iostream>
#include<stdio.h>
#include<queue>
#include<vector>
#include<algorithm>
using namespace std;

int M, N; // M 은 가로 , N 은 세로
int cx[4] = { -1, 0, 1, 0 }, cy[4] = { 0, -1, 0, 1 }; // 왼 상 오 하
int check[1001][1001], map[1001][1001];
queue<pair<int, int>> q;
int start_x, start_y, c;
vector<int> countArr;

int main() {
	fill(check[0], check[0] + (1001 * 1001), 0);
	fill(map[0], map[0] + (1001 * 1001), 0);
	cin >> M >> N;

	bool isZoro = false;
	for (int y = 0; y < N; y++) {
		for (int x = 0; x < M; x++) {
			int temp;
			scanf("%d", &temp);
			map[y][x] = temp;
			if (temp == 0) {
				isZoro = true;
			}
			if (temp == 1) {
				q.push(make_pair(x, y));
			}
		}
	}
	if (!isZoro) {
		printf("0");
		return 0;
	}

	while (!q.empty()) {
		int nX = q.front().first;
		int nY = q.front().second;
		check[nY][nX] = true;
		q.pop();
		for (int i = 0; i < 4; i++) {
			int tempX = nX + cx[i];
			int tempY = nY + cy[i];

			if (tempX < M && tempX >= 0 && tempY < N && tempY >= 0) {
				if (!check[tempY][tempX] && map[tempY][tempX] == 0) {
					q.push(make_pair(tempX, tempY));
					map[tempY][tempX] = map[nY][nX] + 1;
//					printf("tempX : %d tempY : %d\n", tempX, tempY);
//					printf("check : %d\n", check[0][0]);
				}
			}
		}
//		printf("----------------------\n");
	}
//	for (int y = 0; y < N; y++) {
//		for (int x = 0; x < M; x++) {
//			printf("%d ", map[y][x]);
//		}
//		printf("\n");
//	}

// 조건 3) 0이 하나라도 있으면 -1
	for (int y = 0; y < N; y++) {
		for (int x = 0; x < M; x++) {
			if (map[y][x] == 0) {
				printf("-1");
				return 0;
			}
		}
	}
	int result = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			// 익지않은 토마토(0)가 존재할 경우
			if (map[i][j] == 0) {
				printf("-1\n");
				return 0;
			}
			// 토마토는 다 익었는데, 얼마만에 익었는지?
			if (result < map[i][j]) {
				result = map[i][j];
			}
		}
	}

	cout << result - 1 << endl;

}
