#include<iostream>
#include <queue>
#include <vector>

using namespace std;

int number = 7;
int checkArray[7]; // 체크하는 배열
vector<int> array[8]; // 벡터가 들어갈수있는 배열

void bfs(int start) {
	queue<int> q;
	q.push(start);
	checkArray[start] = true;
	while (!q.empty()) {
		int x = q.front();
		q.pop();
		printf("%d ", x);
		// 현제큐에서 꺼낸 원소와 인접한곳을 방분 -> 방문을 한상태이면 넘어가고, 아니면 q에 넣어라
		for (int i = 0; i < array[x].size(); i++) { // x가있는 checkArray에 가서 true 인지 확인
			int y = array[x][i];
			if (!checkArray[y]) {
				q.push(y);
				checkArray[y] = true;
			}
		}
	}
}
int main(void) {
	// 1과 2을 연결합니다.
	array[1].push_back(2);
	array[2].push_back(1);

	// 1과 3를 연결합니다.
	array[1].push_back(3);
	array[3].push_back(1);

	// 2과 3를 연결합니다.
	array[2].push_back(3);
	array[3].push_back(2);

	// 2과 4을 연결합니다.
	array[2].push_back(4);
	array[4].push_back(2);

	// 2과 5를 연결합니다.
	array[2].push_back(5);
	array[5].push_back(2);

	// 3와 6를 연결합니다.
	array[3].push_back(6);
	array[6].push_back(3);

	// 3와 7을 연결합니다.
	array[3].push_back(7);
	array[7].push_back(3);

	// 4와 5를 연결합니다.
	array[4].push_back(5);
	array[5].push_back(4);

	// 6과 7을 연결합니다.
	array[6].push_back(7);
	array[7].push_back(6);

	// BFS를 수행합니다.
	bfs(1);
	return 0;
}
